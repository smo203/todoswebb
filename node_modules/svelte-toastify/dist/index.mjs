function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function null_to_empty(value) {
    return value == null ? '' : value;
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.data !== data)
        text.data = data;
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}
// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
function bubble(component, event) {
    const callbacks = component.$$.callbacks[event.type];
    if (callbacks) {
        callbacks.slice().forEach(fn => fn(event));
    }
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if ($$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

/**
 * Store will
 * 1. Will maintain a list of all toasts
 * 2. A queue to store the toast which were fired before the container was mounted
 * 3. Method to add a new toast.
 * 4. Method to delete a toast.
 * 5. Method to update an existing toast.
 * 6. Method to clear all toast
 */
function Store() {
    const { subscribe, set, update } = writable([]);
    function add(toastObj) {
        update(list => {
            return [...list, toastObj];
        });
    }
    function remove(id) {
        update(list => {
            const index = list.findIndex((e) => e.toastId === id);
            list.splice(index, 1);
            return [...list];
        });
    }
    return {
        subscribe,
        add,
        remove,
    };
}
const toastStore = Store();

/**
 * Generate a random toastId
 */
const generateToastId = () => {
    return (Math.random().toString(36) + Date.now().toString(36)).substr(2, 10);
};

const img = "data:image/svg+xml,%3csvg width='32' height='32' xmlns='http://www.w3.org/2000/svg'%3e %3cg%3e %3ctitle%3ebackground%3c/title%3e %3crect fill='none' id='canvas_background' height='402' width='582' y='-1' x='-1'/%3e %3c/g%3e %3cg%3e %3ctitle%3eLayer 1%3c/title%3e %3cpath id='svg_1' fill='white' d='m16%2c0c-8.836%2c0 -16%2c7.164 -16%2c16s7.164%2c16 16%2c16s16%2c-7.164 16%2c-16s-7.164%2c-16 -16%2c-16zm-2.48%2c23.383l-7.362%2c-7.363l2.828%2c-2.828l4.533%2c4.535l9.617%2c-9.617l2.828%2c2.828l-12.444%2c12.445z'/%3e %3c/g%3e%3c/svg%3e";

const img$1 = "data:image/svg+xml,%3csvg width='32' height='32' xmlns='http://www.w3.org/2000/svg'%3e %3cg%3e %3ctitle%3ebackground%3c/title%3e %3crect fill='none' id='canvas_background' height='402' width='582' y='-1' x='-1'/%3e %3c/g%3e %3cg%3e %3ctitle%3eLayer 1%3c/title%3e %3ccircle fill='white' r='16' id='BG' cy='16' cx='16'/%3e %3cpath fill='%23d72828' id='Exclamatory_x5F_Sign' d='m14.5%2c25l3%2c0l0%2c-3l-3%2c0l0%2c3zm0%2c-19l0%2c13l3%2c0l0%2c-13l-3%2c0z'/%3e %3c/g%3e%3c/svg%3e";

const img$2 = "data:image/svg+xml,%3csvg width='85' height='85' xmlns='http://www.w3.org/2000/svg'%3e %3cg%3e %3ctitle%3ebackground%3c/title%3e %3crect fill='none' id='canvas_background' height='402' width='582' y='-1' x='-1'/%3e %3c/g%3e %3cg%3e %3ctitle%3eLayer 1%3c/title%3e %3cpath fill='white' id='svg_1' d='m42.5%2c0.003c-23.472%2c0 -42.5%2c19.028 -42.5%2c42.5s19.028%2c42.5 42.5%2c42.5s42.5%2c-19.027 42.5%2c-42.5s-19.028%2c-42.5 -42.5%2c-42.5zm-0.212%2c66.267c0%2c0 -1.972%2c1.311 -3.32%2c1.305c-0.12%2c0.055 -0.191%2c0.087 -0.191%2c0.087l0.003%2c-0.087c-0.283%2c-0.013 -0.568%2c-0.053 -0.855%2c-0.125l-0.426%2c-0.105c-2.354%2c-0.584 -3.6%2c-2.918 -3.014%2c-5.271l3.277%2c-13.211l1.479%2c-5.967c1.376%2c-5.54 -4.363%2c1.178 -5.54%2c-1.374c-0.777%2c-1.687 4.464%2c-5.227 8.293%2c-7.896c0%2c0 1.97%2c-1.309 3.319%2c-1.304c0.121%2c-0.056 0.192%2c-0.087 0.192%2c-0.087l-0.005%2c0.087c0.285%2c0.013 0.57%2c0.053 0.857%2c0.124l0.426%2c0.106c2.354%2c0.584 3.788%2c2.965 3.204%2c5.318l-3.276%2c13.212l-1.482%2c5.967c-1.374%2c5.54 4.27%2c-1.204 5.446%2c1.351c0.777%2c1.685 -4.559%2c5.201 -8.387%2c7.87zm8.306%2c-41.294c-0.818%2c3.295 -4.152%2c5.304 -7.446%2c4.486c-3.296%2c-0.818 -5.305%2c-4.151 -4.487%2c-7.447c0.818%2c-3.296 4.152%2c-5.304 7.446%2c-4.486c3.296%2c0.817 5.304%2c4.151 4.487%2c7.447z'/%3e %3c/g%3e%3c/svg%3e";

const img$3 = "data:image/svg+xml,%3csvg width='1792' height='1792' xmlns='http://www.w3.org/2000/svg'%3e %3cg%3e %3ctitle%3ebackground%3c/title%3e %3crect fill='none' id='canvas_background' height='402' width='582' y='-1' x='-1'/%3e %3c/g%3e %3cg%3e %3ctitle%3eLayer 1%3c/title%3e %3cpath fill='white' id='svg_1' d='m1024%2c1375l0%2c-190q0%2c-14 -9.5%2c-23.5t-22.5%2c-9.5l-192%2c0q-13%2c0 -22.5%2c9.5t-9.5%2c23.5l0%2c190q0%2c14 9.5%2c23.5t22.5%2c9.5l192%2c0q13%2c0 22.5%2c-9.5t9.5%2c-23.5zm-2%2c-374l18%2c-459q0%2c-12 -10%2c-19q-13%2c-11 -24%2c-11l-220%2c0q-11%2c0 -24%2c11q-10%2c7 -10%2c21l17%2c457q0%2c10 10%2c16.5t24%2c6.5l185%2c0q14%2c0 23.5%2c-6.5t10.5%2c-16.5zm-14%2c-934l768%2c1408q35%2c63 -2%2c126q-17%2c29 -46.5%2c46t-63.5%2c17l-1536%2c0q-34%2c0 -63.5%2c-17t-46.5%2c-46q-37%2c-63 -2%2c-126l768%2c-1408q17%2c-31 47%2c-49t65%2c-18t65%2c18t47%2c49z'/%3e %3c/g%3e%3c/svg%3e";

/**
 * Toast Positions
 */
const POSITION = {
    TOP_LEFT: 'top-left',
    TOP_RIGHT: 'top-right',
    TOP_CENTER: 'top-center',
    BOTTOM_LEFT: 'bottom-left',
    BOTTOM_RIGHT: 'bottom-right',
    BOTTOM_CENTER: 'bottom-center'
};
/**
 * Toast Types
 */
const TYPE = {
    INFO: 'info',
    SUCCESS: 'success',
    WARNING: 'warning',
    ERROR: 'error',
    DEFAULT: 'default',
};
/**
 * Default Configuration Object
 * @todo add icon for defaul configuration
 */
const DEFAULT_CONFIG = {
    position: POSITION.BOTTOM_RIGHT,
    autoClose: 5000,
    preventDuplicate: false,
    closeButton: true,
    className: null,
    bodyClassName: null,
    [TYPE.SUCCESS]: {
        icon: img,
    },
    [TYPE.ERROR]: {
        icon: img$1,
    },
    [TYPE.WARNING]: {
        icon: img$3,
    },
    [TYPE.INFO]: {
        icon: img$2,
    }
};

/**
 * Singleton Class Toast
 */
class Toast {
    constructor() {
        this.config = DEFAULT_CONFIG;
        this.POSITION = POSITION;
        this.TYPE = TYPE;
        this.idMap = {};
    }
    static getInstance() {
        if (Toast.instance) {
            return Toast.instance;
        }
        Toast.instance = new Toast();
        return Toast.instance;
    }
    validateOptions(options) {
        // if prevent duplicate is true and toastid is present
        if (this.config.preventDuplicate && options.toastId) {
            // check if the given toastid exists in the map
            return this.idMap[options.toastId] === undefined;
        }
        return true;
    }
    mergeOptions(type, options) {
        options = Object.assign(Object.assign({}, options), { autoClose: options.autoClose !== undefined ? options.autoClose : this.config.autoClose, toastId: options.toastId ? options.toastId : generateToastId(), closeButton: options.closeButton !== undefined ? options.closeButton : this.config.closeButton, bodyClassName: options.bodyClassName !== undefined ? options.bodyClassName : this.config.bodyClassName });
        if (options.icon === true) {
            options.icon = this.config[type].icon;
        }
        this.idMap[options.toastId] = true;
        return options;
    }
    configure(configObj) {
        this.config = Object.assign(Object.assign({}, this.config), configObj);
    }
    success(msg, options) {
        if (options && !this.validateOptions(options)) {
            return;
        }
        options = this.mergeOptions(this.TYPE.SUCCESS, Object.assign(Object.assign({}, options), { body: msg, type: TYPE.SUCCESS }));
        toastStore.add(options);
        return options.toastId;
    }
    error(msg, options) {
        if (options && !this.validateOptions(options)) {
            return;
        }
        options = this.mergeOptions(this.TYPE.ERROR, Object.assign(Object.assign({}, options), { body: msg, type: TYPE.ERROR }));
        toastStore.add(options);
        return options.toastId;
    }
    warning(msg, options) {
        if (options && !this.validateOptions(options)) {
            return;
        }
        options = this.mergeOptions(this.TYPE.WARNING, Object.assign(Object.assign({}, options), { body: msg, type: TYPE.WARNING }));
        toastStore.add(options);
        return options.toastId;
    }
    info(msg, options) {
        if (options && !this.validateOptions(options)) {
            return;
        }
        options = this.mergeOptions(this.TYPE.INFO, Object.assign(Object.assign({}, options), { body: msg, type: TYPE.INFO }));
        toastStore.add(options);
        return options.toastId;
    }
    default(msg, options) {
        if (options && !this.validateOptions(options)) {
            return;
        }
        options = this.mergeOptions(this.TYPE.DEFAULT, Object.assign(Object.assign({}, options), { body: msg, type: TYPE.DEFAULT }));
        toastStore.add(options);
        return options.toastId;
    }
    delete(toastId) {
        // remove the toastid from map
        if (this.idMap[toastId]) {
            delete this.idMap[toastId];
            // delete toast from store
            toastStore.remove(toastId);
        }
    }
}
const toast = Toast.getInstance();

/* src/components/CloseButton.svelte generated by Svelte v3.20.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1udl97b-style";
	style.textContent = ".close-button.svelte-1udl97b{position:relative;float:right;font-weight:700;color:#fff;outline:none;border:none;text-shadow:0 1px 0 #fff;opacity:0.8;line-height:1;font-size:16px;padding:0;cursor:pointer;background:0 0;border:0}.close-button--default.svelte-1udl97b{color:#000;opacity:0.3}svg.svelte-1udl97b{fill:currentColor;height:16px;width:14px}";
	append(document.head, style);
}

// (68:4) {:else}
function create_else_block(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "d", "M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1\n                11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75\n                3.75z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "viewBox", "0 0 14 16");
			attr(svg, "class", "svelte-1udl97b");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (66:4) {#if typeof closeButton === 'function'}
function create_if_block(ctx) {
	let switch_instance_anchor;
	let current;
	var switch_value = /*closeButton*/ ctx[0];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*closeButton*/ ctx[0])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function create_fragment(ctx) {
	let button;
	let current_block_type_index;
	let if_block;
	let button_class_value;
	let current;
	let dispose;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (typeof /*closeButton*/ ctx[0] === "function") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			button = element("button");
			if_block.c();
			attr(button, "type", "button");
			attr(button, "class", button_class_value = "" + (null_to_empty(/*className*/ ctx[1]) + " svelte-1udl97b"));
			attr(button, "aria-label", "close");
		},
		m(target, anchor, remount) {
			insert(target, button, anchor);
			if_blocks[current_block_type_index].m(button, null);
			current = true;
			if (remount) dispose();
			dispose = listen(button, "click", /*onClickHandler*/ ctx[2]);
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(button, null);
			}

			if (!current || dirty & /*className*/ 2 && button_class_value !== (button_class_value = "" + (null_to_empty(/*className*/ ctx[1]) + " svelte-1udl97b"))) {
				attr(button, "class", button_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if_blocks[current_block_type_index].d();
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { id } = $$props;
	let { onClose } = $$props;
	let { closeButton } = $$props;
	let { type } = $$props;
	const dispatch = createEventDispatcher();

	const getClassName = type => {
		if (type === TYPE.DEFAULT) {
			return "close-button close-button--default";
		}

		return "close-button";
	};

	/*
 * on close button handler
 * dispatch delete event with id to delete the toast
 * if onClose callback is passed call that with toast id
 */
	const onClickHandler = () => {
		dispatch("delete", { id });

		if (onClose) {
			onClose(id);
		}
	};

	$$self.$set = $$props => {
		if ("id" in $$props) $$invalidate(3, id = $$props.id);
		if ("onClose" in $$props) $$invalidate(4, onClose = $$props.onClose);
		if ("closeButton" in $$props) $$invalidate(0, closeButton = $$props.closeButton);
		if ("type" in $$props) $$invalidate(5, type = $$props.type);
	};

	let className;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*type*/ 32) {
			 $$invalidate(1, className = getClassName(type));
		}
	};

	return [closeButton, className, onClickHandler, id, onClose, type];
}

class CloseButton extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1udl97b-style")) add_css();

		init(this, options, instance, create_fragment, safe_not_equal, {
			id: 3,
			onClose: 4,
			closeButton: 0,
			type: 5
		});
	}
}

/* src/components/ToastItem.svelte generated by Svelte v3.20.1 */

function add_css$1() {
	var style = element("style");
	style.id = "svelte-1w9tgj9-style";
	style.textContent = ".toast-item.svelte-1w9tgj9.svelte-1w9tgj9{background:green;transition:0.3s ease;position:relative;pointer-events:auto;overflow:hidden;margin:0 0 6px;padding:15px 15px;margin-bottom:15px;height:auto;max-height:100px;border-radius:5px 5px 5px 5px;box-shadow:0 0 10px #999;color:#000;opacity:0.9;background-position:15px;background-repeat:no-repeat;color:#fff;display:flex;align-items:center}.animate-right.svelte-1w9tgj9.svelte-1w9tgj9{transition:transform 0.6s ease-in-out;animation:svelte-1w9tgj9-toast-in-right 0.7s}.animate-left.svelte-1w9tgj9.svelte-1w9tgj9{transition:transform 0.6s ease-in-out;animation:svelte-1w9tgj9-toast-in-left 0.7s}.toast-item.svelte-1w9tgj9.svelte-1w9tgj9:hover{box-shadow:0 0 12px #aaa;opacity:1;cursor:pointer}.toast-item__image.svelte-1w9tgj9.svelte-1w9tgj9{flex:0 1 30px;margin-right:10px}.toast-item__image.svelte-1w9tgj9 img.svelte-1w9tgj9{width:30px;height:30px}.toast-item__body.svelte-1w9tgj9.svelte-1w9tgj9{flex:4}.toast-item__buttons.svelte-1w9tgj9.svelte-1w9tgj9{flex:0 1 10px;align-self:baseline}.toast-item__title.svelte-1w9tgj9.svelte-1w9tgj9{font-weight:700;font-size:16px;text-align:left;margin-top:0;margin-bottom:6px;height:18px}.toast-item__message.svelte-1w9tgj9.svelte-1w9tgj9{margin:0;text-align:left;width:100%}@keyframes svelte-1w9tgj9-toast-in-right{from{transform:translateX(100%)}to{transform:translateX(0)}}@keyframes svelte-1w9tgj9-toast-in-left{from{transform:translateX(-100%)}to{transform:translateX(0)}}.toast-item--success.svelte-1w9tgj9.svelte-1w9tgj9{background-color:#5cb85c;color:white}.toast-item--error.svelte-1w9tgj9.svelte-1w9tgj9{background-color:#d9534f;color:white}.toast-item--warning.svelte-1w9tgj9.svelte-1w9tgj9{background-color:#f0ad4e;color:white}.toast-item--info.svelte-1w9tgj9.svelte-1w9tgj9{background-color:#5bc0de;color:white}.toast-item--default.svelte-1w9tgj9.svelte-1w9tgj9{background-color:white;color:black}";
	append(document.head, style);
}

// (167:4) {#if icon}
function create_if_block_2(ctx) {
	let div;
	let img;
	let img_src_value;

	return {
		c() {
			div = element("div");
			img = element("img");
			if (img.src !== (img_src_value = /*icon*/ ctx[5])) attr(img, "src", img_src_value);
			attr(img, "alt", "icon");
			attr(img, "class", "svelte-1w9tgj9");
			attr(div, "class", "toast-item__image svelte-1w9tgj9");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, img);
		},
		p(ctx, dirty) {
			if (dirty & /*icon*/ 32 && img.src !== (img_src_value = /*icon*/ ctx[5])) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (173:8) {#if title}
function create_if_block_1(ctx) {
	let p;
	let t;

	return {
		c() {
			p = element("p");
			t = text(/*title*/ ctx[1]);
			attr(p, "class", "toast-item__title svelte-1w9tgj9");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (178:4) {#if closeButton}
function create_if_block$1(ctx) {
	let div;
	let current;

	const closebutton = new CloseButton({
			props: {
				id: /*id*/ ctx[0],
				onClose: /*onClose*/ ctx[3],
				closeButton: /*closeButton*/ ctx[4],
				type: /*type*/ ctx[2]
			}
		});

	closebutton.$on("delete", /*delete_handler*/ ctx[16]);

	return {
		c() {
			div = element("div");
			create_component(closebutton.$$.fragment);
			attr(div, "class", "toast-item__buttons svelte-1w9tgj9");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(closebutton, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const closebutton_changes = {};
			if (dirty & /*id*/ 1) closebutton_changes.id = /*id*/ ctx[0];
			if (dirty & /*onClose*/ 8) closebutton_changes.onClose = /*onClose*/ ctx[3];
			if (dirty & /*closeButton*/ 16) closebutton_changes.closeButton = /*closeButton*/ ctx[4];
			if (dirty & /*type*/ 4) closebutton_changes.type = /*type*/ ctx[2];
			closebutton.$set(closebutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(closebutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(closebutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(closebutton);
		}
	};
}

function create_fragment$1(ctx) {
	let div1;
	let t0;
	let div0;
	let t1;
	let t2;
	let div1_class_value;
	let current;
	let if_block0 = /*icon*/ ctx[5] && create_if_block_2(ctx);
	let if_block1 = /*title*/ ctx[1] && create_if_block_1(ctx);
	const default_slot_template = /*$$slots*/ ctx[15].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);
	let if_block2 = /*closeButton*/ ctx[4] && create_if_block$1(ctx);

	return {
		c() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
			t2 = space();
			if (if_block2) if_block2.c();
			attr(div0, "class", "toast-item__body svelte-1w9tgj9");
			attr(div1, "class", div1_class_value = "" + (null_to_empty(/*computedClassName*/ ctx[6]) + " svelte-1w9tgj9"));
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t0);
			append(div1, div0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			append(div1, t2);
			if (if_block2) if_block2.m(div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*icon*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*title*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16384) {
					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[14], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, null));
				}
			}

			if (/*closeButton*/ ctx[4]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
					transition_in(if_block2, 1);
				} else {
					if_block2 = create_if_block$1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div1, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*computedClassName*/ 64 && div1_class_value !== (div1_class_value = "" + (null_to_empty(/*computedClassName*/ ctx[6]) + " svelte-1w9tgj9"))) {
				attr(div1, "class", div1_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block2) if_block2.d();
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { id } = $$props;
	let { title } = $$props;
	let { type } = $$props;
	let { onClose } = $$props;
	let { autoClose } = $$props;
	let { closeButton } = $$props;
	let { icon } = $$props;
	let { className } = $$props;
	let { position } = $$props;

	const getClassNames = type => {
		if (position === "top-right" || position === "bottom-right") {
			return `toast-item animate-right toast-item--${type}`;
		}

		return `toast-item animate-left toast-item--${type}`;
	};

	const dispatch = createEventDispatcher();
	let deleteTimeOut;

	onMount(() => {
		if (autoClose) {
			deleteTimeOut = setTimeout(
				() => {
					dispatch("delete", { id });

					if (onClose) {
						onClose(id);
					}
				},
				autoClose
			);
		}
	});

	const getBodyClassNames = () => {
		let classname = "toast-item__body";

		if (className) {
			classname = `${classname} ${className}`;
		}

		return classname;
	};

	let { $$slots = {}, $$scope } = $$props;

	function delete_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("type" in $$props) $$invalidate(2, type = $$props.type);
		if ("onClose" in $$props) $$invalidate(3, onClose = $$props.onClose);
		if ("autoClose" in $$props) $$invalidate(7, autoClose = $$props.autoClose);
		if ("closeButton" in $$props) $$invalidate(4, closeButton = $$props.closeButton);
		if ("icon" in $$props) $$invalidate(5, icon = $$props.icon);
		if ("className" in $$props) $$invalidate(8, className = $$props.className);
		if ("position" in $$props) $$invalidate(9, position = $$props.position);
		if ("$$scope" in $$props) $$invalidate(14, $$scope = $$props.$$scope);
	};

	let computedClassName;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*type*/ 4) {
			 $$invalidate(6, computedClassName = getClassNames(type));
		}
	};

	return [
		id,
		title,
		type,
		onClose,
		closeButton,
		icon,
		computedClassName,
		autoClose,
		className,
		position,
		deleteTimeOut,
		getClassNames,
		dispatch,
		getBodyClassNames,
		$$scope,
		$$slots,
		delete_handler
	];
}

class ToastItem extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1w9tgj9-style")) add_css$1();

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			id: 0,
			title: 1,
			type: 2,
			onClose: 3,
			autoClose: 7,
			closeButton: 4,
			icon: 5,
			className: 8,
			position: 9
		});
	}
}

/* src/components/Toast.svelte generated by Svelte v3.20.1 */

function add_css$2() {
	var style = element("style");
	style.id = "svelte-1h1qykv-style";
	style.textContent = ".toast-container.svelte-1h1qykv{font-size:14px;box-sizing:border-box;position:fixed;z-index:999999;width:300px}.toast-container--top-right.svelte-1h1qykv{top:12px;right:12px}.toast-container--top-left.svelte-1h1qykv{top:12px;left:12px}.toast-container--bottom-right.svelte-1h1qykv{bottom:12px;right:12px}.toast-container--bottom-left.svelte-1h1qykv{bottom:12px;left:12px}.toast-item__message.svelte-1h1qykv{margin:0;text-align:left;width:100%}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (69:16) {:else}
function create_else_block$1(ctx) {
	let switch_instance_anchor;
	let current;
	var switch_value = /*toastr*/ ctx[6].body;

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*toastr*/ ctx[6].body)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (67:16) {#if typeof toastr.body === 'string'}
function create_if_block$2(ctx) {
	let p;
	let t_value = /*toastr*/ ctx[6].body + "";
	let t;

	return {
		c() {
			p = element("p");
			t = text(t_value);
			attr(p, "class", "toast-item__message svelte-1h1qykv");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*toastStoreValue*/ 1 && t_value !== (t_value = /*toastr*/ ctx[6].body + "")) set_data(t, t_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (66:18)                  
function fallback_block(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$2, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (typeof /*toastr*/ ctx[6].body === "string") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (55:8) <ToastItem             id={toastr.toastId}             title={toastr.title}             type={toastr.type}             icon={toastr.icon}             on:delete={onDelete}             position={toast.config.position}             onClose={toastr.onClose}             autoClose={toastr.autoClose}             closeButton={toastr.closeButton}             className={toastr.bodyClassName}>
function create_default_slot(ctx) {
	let t;
	let current;
	const default_slot_template = /*$$slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	return {
		c() {
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t = space();
		},
		m(target, anchor) {
			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(target, anchor);
			}

			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[5], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null));
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*toastStoreValue*/ 1) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			if (detaching) detach(t);
		}
	};
}

// (54:4) {#each toastStoreValue as toastr}
function create_each_block(ctx) {
	let current;

	const toastitem = new ToastItem({
			props: {
				id: /*toastr*/ ctx[6].toastId,
				title: /*toastr*/ ctx[6].title,
				type: /*toastr*/ ctx[6].type,
				icon: /*toastr*/ ctx[6].icon,
				position: toast.config.position,
				onClose: /*toastr*/ ctx[6].onClose,
				autoClose: /*toastr*/ ctx[6].autoClose,
				closeButton: /*toastr*/ ctx[6].closeButton,
				className: /*toastr*/ ctx[6].bodyClassName,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	toastitem.$on("delete", /*onDelete*/ ctx[2]);

	return {
		c() {
			create_component(toastitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(toastitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const toastitem_changes = {};
			if (dirty & /*toastStoreValue*/ 1) toastitem_changes.id = /*toastr*/ ctx[6].toastId;
			if (dirty & /*toastStoreValue*/ 1) toastitem_changes.title = /*toastr*/ ctx[6].title;
			if (dirty & /*toastStoreValue*/ 1) toastitem_changes.type = /*toastr*/ ctx[6].type;
			if (dirty & /*toastStoreValue*/ 1) toastitem_changes.icon = /*toastr*/ ctx[6].icon;
			if (dirty & /*toastStoreValue*/ 1) toastitem_changes.onClose = /*toastr*/ ctx[6].onClose;
			if (dirty & /*toastStoreValue*/ 1) toastitem_changes.autoClose = /*toastr*/ ctx[6].autoClose;
			if (dirty & /*toastStoreValue*/ 1) toastitem_changes.closeButton = /*toastr*/ ctx[6].closeButton;
			if (dirty & /*toastStoreValue*/ 1) toastitem_changes.className = /*toastr*/ ctx[6].bodyClassName;

			if (dirty & /*$$scope, toastStoreValue*/ 33) {
				toastitem_changes.$$scope = { dirty, ctx };
			}

			toastitem.$set(toastitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(toastitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(toastitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(toastitem, detaching);
		}
	};
}

function create_fragment$2(ctx) {
	let div;
	let div_class_value;
	let current;
	let each_value = /*toastStoreValue*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", div_class_value = "" + (null_to_empty(/*getClassNames*/ ctx[1](toast.config.position)) + " svelte-1h1qykv"));
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*toastStoreValue, toast, onDelete, $$scope*/ 37) {
				each_value = /*toastStoreValue*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	const getClassNames = pos => {
		let classname = `toast-container toast-container--${pos}`;

		if (toast.config.className) {
			classname = `${classname} ${toast.config.className}`;
		}

		return classname;
	};

	let toastStoreValue;

	const unsubscribe = toastStore.subscribe(value => {
		$$invalidate(0, toastStoreValue = value);
	});

	const onDelete = e => {
		const { id } = e.detail;
		toast.delete(id);
	};

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	return [toastStoreValue, getClassNames, onDelete, unsubscribe, $$slots, $$scope];
}

class Toast$1 extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1h1qykv-style")) add_css$2();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});
	}
}

export { Toast$1 as ToastContainer, toast };
